{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Chelly Docs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"explanation/","text":"","title":"Explanation"},{"location":"how-to-guides/","text":"","title":"How-To Guides"},{"location":"reference/","text":"Implement a set of classes to help the ChellyEditor to handle the components and features. This module allows the ChellyEditor to manage features, lexers, and panels. Modules exported by this package: features : Provide the functionalities to extend and manage the editor functionalities. langauges : Provide the functionalities to manage the editor lexer. widgets : Provide the functionalities to manage the editor panels. This module allows the ChellyEditor to manage features(functionalities). Examples: >>> from chelly.managers import FeaturesManager >>> from chelly.features import IndentationGuides >>> editor = ChellyEditor ( None ) >>> editor . features = FeaturesManager The module contains the following classes: FeaturesManager(editor) - Create a new FeaturesManager instance with given editor FeaturesManager Bases: Manager Source code in chelly/managers/features.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class FeaturesManager ( Manager ): def __init__ ( self , editor ): super () . __init__ ( editor ) self . _features = [] def append ( self , feature : object ) -> object : \"\"\"Add the given feature to editor Examples: >>> editor.features.append(CaretLineHighLighter) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object \"\"\" if callable ( feature ): mode = feature ( self . editor ) else : mode = feature self . _features . append ( mode ) return mode append ( feature ) Add the given feature to editor Examples: >>> editor . features . append ( CaretLineHighLighter ) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object Source code in chelly/managers/features.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def append ( self , feature : object ) -> object : \"\"\"Add the given feature to editor Examples: >>> editor.features.append(CaretLineHighLighter) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object \"\"\" if callable ( feature ): mode = feature ( self . editor ) else : mode = feature self . _features . append ( mode ) return mode","title":"Reference"},{"location":"reference/#chelly.managers.features.FeaturesManager","text":"Bases: Manager Source code in chelly/managers/features.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class FeaturesManager ( Manager ): def __init__ ( self , editor ): super () . __init__ ( editor ) self . _features = [] def append ( self , feature : object ) -> object : \"\"\"Add the given feature to editor Examples: >>> editor.features.append(CaretLineHighLighter) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object \"\"\" if callable ( feature ): mode = feature ( self . editor ) else : mode = feature self . _features . append ( mode ) return mode","title":"FeaturesManager"},{"location":"reference/#chelly.managers.features.FeaturesManager.append","text":"Add the given feature to editor Examples: >>> editor . features . append ( CaretLineHighLighter ) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object Source code in chelly/managers/features.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def append ( self , feature : object ) -> object : \"\"\"Add the given feature to editor Examples: >>> editor.features.append(CaretLineHighLighter) :param feature: the mode to be added to editor. :type feature: object :returns: the given mode :rtype: object \"\"\" if callable ( feature ): mode = feature ( self . editor ) else : mode = feature self . _features . append ( mode ) return mode","title":"append()"},{"location":"tutorials/","text":"","title":"Tutorials"}]}